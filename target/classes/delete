package io.spring.batch;
import javax.batch.runtime.StepExecution;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


import lombok.extern.slf4j.Slf4j;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;

import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.ItemWriteListener;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;
import org.springframework.batch.item.database.JdbcBatchItemWriter;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.batch.item.support.CompositeItemWriter;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.logging.log4j2.Log4J2LoggingSystem;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.batch.core.StepListener;

import com.mysql.cj.log.Log;


import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;
import org.springframework.batch.item.database.JdbcBatchItemWriter;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.logging.log4j2.Log4J2LoggingSystem;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.dao.DataIntegrityViolationException;

import com.mysql.cj.log.Log;


@Configuration
@Slf4j
public class JobConfiguration {
	
	private static final Logger logger = Logger.getLogger(JobConfiguration.class.getName());
	
	

	@Autowired
	public JobBuilderFactory jobBuilderFactory;

	@Autowired
	public StepBuilderFactory stepBuilderFactory;
	
	 @Autowired
	 private StudentItemWriter studentItemWriter;

	@Autowired
	public DataSource dataSource;
	
	public JobConfiguration(DataSource dataSource) {
        this.dataSource = dataSource;
    }

	@Bean
	public FlatFileItemReader<Person> personItemReader() {
		FlatFileItemReader<Person> reader = new FlatFileItemReader<>();
		reader.setLinesToSkip(1);
		reader.setResource(new ClassPathResource("/data/person.csv"));

		DefaultLineMapper<Person> customerLineMapper = new DefaultLineMapper<>();

		DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();
		tokenizer.setNames(new String[] {"id1", "firstName", "lastName", "birthdate"});

		customerLineMapper.setLineTokenizer(tokenizer);
		customerLineMapper.setFieldSetMapper(new PersonFieldSetMapper());
		customerLineMapper.afterPropertiesSet();
		reader.setLineMapper(customerLineMapper);
		return reader;
	}

	
	@Bean
	public ItemProcessor<Person, Student> personToStudentProcessor() {
	    return new ItemProcessor<Person, Student>() {
	        @Override
	        public Student process(Person person) throws Exception {

	            boolean personExistsInPerson = checkIfPersonExistsInPersonTable(person);

	            if (personExistsInPerson) {

	                boolean personExistsInStudent = checkIfPersonExistsInStudentTable(person);

	                if (personExistsInStudent) {

	                    Student student = new Student();
	                    student.setId1(person.getId1());
	                    student.setFirstName(person.getFirstName());
	                    student.setLastName(person.getLastName());
	                    student.setBirthdate(person.getBirthdate());

	                    return student;
	                } else {

	                    Student student = new Student();
	                    student.setId1(person.getId1());
	                    student.setFirstName(person.getFirstName());
	                    student.setLastName(person.getLastName());
	                    student.setBirthdate(person.getBirthdate());

	                    return student;
	                }
	            } else {
//	            	deletePersonRecord(person.getId1());
	            	return null;
	            }
	        }
	    };
	}

	private boolean checkIfPersonExistsInStudentTable(Person person) {
	    try (Connection connection = dataSource.getConnection()) {
	        String sql = "SELECT COUNT(*) FROM STUDENT WHERE id = ? AND first_name = ? AND last_name = ? AND birthdate = ?";
	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
	            preparedStatement.setLong(1, person.getId1());
	            preparedStatement.setString(2, person.getFirstName());
	            preparedStatement.setString(3, person.getLastName());
	            preparedStatement.setDate(4, new java.sql.Date(person.getBirthdate().getTime()));



	            try (ResultSet resultSet = preparedStatement.executeQuery()) {

	            	    if (resultSet.next()) {
	            	        int count = resultSet.getInt(1);
	            	        boolean personExists = count > 0;
	            	        return personExists; 

	            	    }
	            	}
	            }
	        }
	     catch (SQLException e) {

	        e.printStackTrace();
	    }


	    return false;
	}

	private boolean checkIfPersonExistsInPersonTable(Person person) {
	    try (Connection connection = dataSource.getConnection()) {
	        String sql = "SELECT COUNT(*) FROM PERSON WHERE id = ? AND first_name = ? AND last_name = ? AND birthdate = ?";
	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
	            preparedStatement.setLong(1, person.getId1());
	            preparedStatement.setString(2, person.getFirstName());
	            preparedStatement.setString(3, person.getLastName());
	            preparedStatement.setDate(4, new java.sql.Date(person.getBirthdate().getTime()));

	            try (ResultSet resultSet = preparedStatement.executeQuery()) {
	                if (resultSet.next()) {
	                    int count = resultSet.getInt(1);
	                    return count > 0; 

	                }
	            }
	        }
	    } catch (SQLException e) {

	        e.printStackTrace();
	    }


	    return false;
	}
	
//	private void deletePersonRecord(Long id) {
//	    try (Connection connection = dataSource.getConnection()) {
//	        String sql = "DELETE FROM PERSON WHERE id = ?";
//	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
//	            preparedStatement.setLong(1, id);
//	            int deletedRows = preparedStatement.executeUpdate();
//	            if (deletedRows > 0) {
//	                System.out.println("Deleted record with ID: " + id);
//	            }
//	        }
//	    } catch (SQLException e) {
//	        System.out.println("Error while deleting record with ID: " + id + " " + e.getMessage());
//	    }
//	}

	

	

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Bean
	public JdbcBatchItemWriter<Person> personItemWriter() {
		JdbcBatchItemWriter<Person> itemWriter = new JdbcBatchItemWriter<>();

		itemWriter.setDataSource(this.dataSource);
		itemWriter.setSql("INSERT INTO person (id, first_Name, last_Name, birthdate) VALUES (:id1, :firstName, :lastName, :birthdate) " +
	            "ON DUPLICATE KEY UPDATE " +
	            "first_Name=VALUES(first_Name), last_Name=VALUES(last_Name), birthdate=VALUES(birthdate)");
	    itemWriter.setItemSqlParameterSourceProvider(new BeanPropertyItemSqlParameterSourceProvider());

	    itemWriter.setAssertUpdates(false);


	    try {
	        itemWriter.afterPropertiesSet();
	    } catch (DataIntegrityViolationException ex) {

	    	logger.log(Level.SEVERE,"Error while writing person data: " + ex.getMessage()); 

	    }

		return itemWriter;
	}






	@Bean
    public Step step1() {
        return stepBuilderFactory.get("step1")
                .<Person, Person>chunk(10)
                .reader(personItemReader())  
                .writer(personItemWriter())
                .build();
    }
	
	
	@Bean
    public Step step2() {
        return stepBuilderFactory.get("step2")
                .<Person, Student>chunk(10)
                .reader(personItemReader())
                .processor(personToStudentProcessor())
                .writer(studentItemWriter)
                .build();
    }
	
	@Bean
	public Step step3() {
	    return stepBuilderFactory.get("step3")
	            .tasklet((contribution, chunkContext) -> {
	                Set<Long> idsInFlatFile = readIdsFromFlatFile();
	                deleteIdsNotInFlatFile(idsInFlatFile);
	                return RepeatStatus.FINISHED;
	            })
	            .build();
	}


	private Set<Long> readIdsFromFlatFile() {
	    Set<Long> idsInFlatFile = new HashSet<>();
	    FlatFileItemReader<Person> reader = personItemReader();

	    try {
	        reader.open(new ExecutionContext());

	        Person item;
	        do {
	            item = reader.read();
	            if (item != null) {
	                idsInFlatFile.add(item.getId1());
	            }
	        } while (item != null);

	        reader.close();
	    } catch (Exception e) {
	        // Handle any exceptions
	        e.printStackTrace();
	    }

	    return idsInFlatFile;
	}


	private void deleteIdsNotInFlatFile(Set<Long> idsInFlatFile) {
	    try (Connection connection = dataSource.getConnection()) {
	        String sql = "DELETE FROM PERSON WHERE id NOT IN ("
	            + idsInFlatFile.stream()
	                .map(String::valueOf)
	                .collect(Collectors.joining(","))
	            + ")";

	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
	            int deletedRows = preparedStatement.executeUpdate();
	            System.out.println("Deleted " + deletedRows + " rows from PERSON table.");
	        }
	    } catch (SQLException e) {
	        System.out.println("Error while deleting records from PERSON table: " + e.getMessage());
	    }
	}



	@Bean
    public Job job() {
        return jobBuilderFactory.get("job")
                .start(step1())
                .next(step2())
                .next(step3())
                .build();
    }
}
	
